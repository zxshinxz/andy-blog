{"version":3,"sources":["services/post.service.mock.tsx","services/comment.service.mock.tsx","services/api.tsx","services/async.tsx","components/BlogDetail/BlogDetail.tsx","components/Header/Header.tsx","components/SideNav/SideNav.tsx","components/List/List.tsx","components/Write/Write.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["posts","id","title","content","createdBy","createdAt","updatedAt","PostServiceMock","getPosts","Promise","resolve","setTimeout","getPost","foundPost","find","post","writePost","push","updatePost","postData","foundIndex","findIndex","_","assign","deletePost","splice","Number","comments","CommentServiceMock","getComments","getComment","foundComment","comment","writeComment","updateComment","deleteComment","initial","AndyContext","createContext","useAndy","useContext","AndyProvider","props","andy","Provider","value","children","asyncReducer","state","action","type","loading","data","error","useAsync","promiseFn","useReducer","dispatch","params","a","run","useAsyncEffect","useEffect","BlogDetail","postId","useParams","postIdNumber","parseInt","asyncEffectState","message","className","Header","css","imageUrl","alt","src","defaultProps","pubUrl","process","SideNav","menus","map","menu","hidden","key","to","path","label","exact","route","component","styleCss","List","history","useHistory","confirmDelete","then","onClick","Write","useForm","register","handleSubmit","setValue","errors","onSubmit","console","log","name","ref","required","App","style","height","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5acabfbc.chunk.js","sourcesContent":["/* eslint-disable */\nimport _ from 'lodash';\nimport { Post } from '../object-model/model';\n\nconst posts: Post[] = [\n  {\n    id: 0,\n    title: '게시글 0',\n    content: '게시글 0 내용',\n    createdBy: 'Andy the 투명 드래곤',\n    createdAt: '2021-02-16 00:00:00',\n    updatedAt: '2021-02-16 00:00:00',\n  },\n  {\n    id: 1,\n    title: '게시글 1',\n    content: '게시글 1 내용',\n    createdBy: 'Andy the 투명 드래곤',\n    createdAt: '2021-02-16 00:00:00',\n    updatedAt: '2021-02-16 00:00:00',\n  },\n  {\n    id: 2,\n    title: '게시글 2',\n    content: '게시글 2 내용',\n    createdBy: 'Andy the 투명 드래곤',\n    createdAt: '2021-02-16 00:00:00',\n    updatedAt: '2021-02-16 00:00:00',\n  },\n  {\n    id: 3,\n    title: '게시글 3',\n    content: '게시글 3 내용',\n    createdBy: 'Andy the 투명 드래곤',\n    createdAt: '2021-02-16 00:00:00',\n    updatedAt: '2021-02-16 00:00:00',\n  },\n  {\n    id: 4,\n    title: '게시글 4',\n    content: '게시글 4 내용',\n    createdBy: 'Andy the 투명 드래곤',\n    createdAt: '2021-02-16 00:00:00',\n    updatedAt: '2021-02-16 00:00:00',\n  },\n  {\n    id: 5,\n    title: '게시글 5',\n    content: '게시글 5 내용',\n    createdBy: 'Andy the 투명 드래곤',\n    createdAt: '2021-02-16 00:00:00',\n    updatedAt: '2021-02-16 00:00:00',\n  },\n  {\n    id: 6,\n    title: '게시글 6',\n    content: '게시글 6 내용',\n    createdBy: 'Andy the 투명 드래곤',\n    createdAt: '2021-02-16 00:00:00',\n    updatedAt: '2021-02-16 00:00:00',\n  },\n  {\n    id: 7,\n    title: '게시글 7',\n    content: '게시글 7 내용',\n    createdBy: 'Andy the 투명 드래곤',\n    createdAt: '2021-02-16 00:00:00',\n    updatedAt: '2021-02-16 00:00:00',\n  },\n];\n\nexport const PostServiceMock = {\n  getPosts: () => {\n    const promise: Promise<Post[]> = new Promise((resolve) => {\n      setTimeout(() => {\n        resolve(posts);\n      }, 500);\n    });\n    return promise;\n  },\n  getPost: (id: number) => {\n    const foundPost: Post | undefined = posts.find((post: Post) => {\n      return post.id === id;\n    });\n\n    return Promise.resolve(foundPost);\n  },\n  writePost: (post: Post) => {\n    posts.push(post);\n    return Promise.resolve(1);\n  },\n  updatePost: (id: number, post: Post) => {\n    const foundPost: Post | undefined = posts.find((postData: Post) => {\n      return postData.id === id;\n    });\n\n    const foundIndex: number = posts.findIndex((postData: Post) => {\n      return postData.id === id;\n    });\n\n    posts[foundIndex] = _.assign(foundPost, post);\n\n    return Promise.resolve(1);\n  },\n  deletePost: (id: number) => {\n    const foundIndex: number = posts.findIndex((post: Post) => {\n      return post.id === id;\n    });\n\n    if (foundIndex !== -1) {\n      posts.splice(Number(foundIndex), 1);\n      return Promise.resolve(1);\n    }\n    return Promise.resolve(0);\n  },\n};\n","import { Comment } from '../object-model/model';\n\nconst comments: Comment[] = [\n  {\n    id: 1,\n    content: '댓글 1 내용',\n    createdBy: 'Andy the 투명 드래곤',\n    createdAt: '2021-02-16 00:00:00',\n    updatedAt: '2021-02-16 00:00:00',\n  },\n  {\n    id: 2,\n    content: '댓글 2 내용',\n    createdBy: 'Andy the 투명 드래곤',\n    createdAt: '2021-02-16 00:00:00',\n    updatedAt: '2021-02-16 00:00:00',\n  },\n  {\n    id: 3,\n    content: '댓글 3 내용',\n    createdBy: 'Andy the 투명 드래곤',\n    createdAt: '2021-02-16 00:00:00',\n    updatedAt: '2021-02-16 00:00:00',\n  },\n  {\n    id: 4,\n    content: '댓글 4 내용',\n    createdBy: 'Andy the 투명 드래곤',\n    createdAt: '2021-02-16 00:00:00',\n    updatedAt: '2021-02-16 00:00:00',\n  },\n  {\n    id: 5,\n    content: '댓글 5 내용',\n    createdBy: 'Andy the 투명 드래곤',\n    createdAt: '2021-02-16 00:00:00',\n    updatedAt: '2021-02-16 00:00:00',\n  },\n  {\n    id: 6,\n    content: '댓글 6 내용',\n    createdBy: 'Andy the 투명 드래곤',\n    createdAt: '2021-02-16 00:00:00',\n    updatedAt: '2021-02-16 00:00:00',\n  },\n  {\n    id: 7,\n    content: '댓글 7 내용',\n    createdBy: 'Andy the 투명 드래곤',\n    createdAt: '2021-02-16 00:00:00',\n    updatedAt: '2021-02-16 00:00:00',\n  },\n  {\n    id: 8,\n    content: '댓글 8 내용',\n    createdBy: 'Andy the 투명 드래곤',\n    createdAt: '2021-02-16 00:00:00',\n    updatedAt: '2021-02-16 00:00:00',\n  },\n];\n\nexport const CommentServiceMock = {\n  getComments: (): Promise<Comment[]> => {\n    return Promise.resolve(comments);\n  },\n  getComment: (id: number): Promise<Comment | undefined> => {\n    const foundComment: Comment | undefined = comments.find((comment: Comment) => {\n      return comment.id === id;\n    });\n    return Promise.resolve(foundComment);\n  },\n  writeComment: (): Promise<number> => {\n    return Promise.resolve(1);\n  },\n  updateComment: (): Promise<number> => {\n    return Promise.resolve(1);\n  },\n  deleteComment: (): Promise<number> => {\n    return Promise.resolve(1);\n  },\n};\n","import React, { createContext, useContext } from 'react';\nimport { AndyService } from '../object-model/model';\nimport { PostServiceMock } from './post.service.mock';\nimport { CommentServiceMock } from './comment.service.mock';\n\nconst initial: AndyService = {\n  post: PostServiceMock,\n  comment: CommentServiceMock,\n};\n\nexport const AndyContext = createContext<AndyService>(initial);\nexport const useAndy = (): AndyService => useContext<AndyService>(AndyContext);\n\ntype AndyProviderProps = {\n  andy: AndyService;\n  children: JSX.Element | JSX.Element[];\n};\n\nexport const AndyProvider = (props: AndyProviderProps): JSX.Element => {\n  let andy: AndyService = useContext(AndyContext);\n\n  if (props.andy !== andy) {\n    andy = props.andy || null;\n  }\n\n  return <AndyContext.Provider value={andy}>{props.children}</AndyContext.Provider>;\n};\n","import { Reducer, useEffect, useReducer } from 'react';\n\ntype LoadingAction = {\n  type: 'LOADING';\n};\n\ntype SuccessAction<T> = {\n  type: 'SUCCESS';\n  data: T;\n};\n\ntype ErrorAction<T> = {\n  type: 'ERROR';\n  error: T;\n};\n\ntype AsyncAction<D, E> = LoadingAction | SuccessAction<D> | ErrorAction<E>;\n\nexport type AsyncState<D, E> = {\n  loading: boolean;\n  data: D | null;\n  error: E | null;\n};\n\nexport type AsyncEffectState<D, E, F extends AnyFunction> = {\n  state: AsyncState<D, E>;\n  run: (params: Parameters<F>) => Promise<void>;\n};\n\nfunction asyncReducer<D, E>(state: AsyncState<D, E>, action: AsyncAction<D, E>): AsyncState<D, E> {\n  switch (action.type) {\n    default:\n      return {\n        loading: false,\n        data: null,\n        error: null,\n      };\n    case 'LOADING':\n      return {\n        loading: true,\n        data: null,\n        error: null,\n      };\n    case 'SUCCESS':\n      return {\n        loading: false,\n        data: action.data,\n        error: null,\n      };\n    case 'ERROR':\n      return {\n        loading: false,\n        data: null,\n        error: action.error,\n      };\n  }\n}\n\ntype AnyFunction = (...args: any) => Promise<any>;\n\nfunction useAsync<D, E, F extends AnyFunction>(promiseFn: F): AsyncEffectState<D, E, F> {\n  const [state, dispatch] = useReducer<Reducer<AsyncState<D, E>, AsyncAction<D, E>>>(asyncReducer, {\n    loading: false,\n    data: null,\n    error: null,\n  });\n\n  async function run(params: Parameters<F>) {\n    dispatch({ type: 'LOADING' });\n    try {\n      const data = await promiseFn(...params);\n      dispatch({\n        type: 'SUCCESS',\n        data,\n      });\n    } catch (e) {\n      dispatch({\n        type: 'ERROR',\n        error: e,\n      });\n    }\n  }\n\n  return { state, run };\n}\n\nfunction useAsyncEffect<D, E, F extends AnyFunction>(promiseFn: F, params: Parameters<F>): AsyncEffectState<D, E, F> {\n  const { state, run } = useAsync<D, E, F>(promiseFn);\n\n  useEffect(() => {\n    run(params);\n  }, []);\n\n  return {\n    state,\n    run,\n  };\n}\n\nexport default useAsync;\nexport { useAsyncEffect };\n","import React, { ReactElement } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useAndy } from '../../services/api';\nimport { AndyService, Post } from '../../object-model/model';\nimport { useAsyncEffect } from '../../services/async';\n\ninterface ParamTypes {\n  postId: string;\n}\n\nexport const BlogDetail = (): ReactElement => {\n  const andy: AndyService = useAndy();\n  const { postId } = useParams<ParamTypes>();\n  const postIdNumber: number = parseInt(postId, 10);\n\n  const asyncEffectState = useAsyncEffect<Post | undefined, Error, (id: number) => Promise<Post | undefined>>(\n    andy.post.getPost,\n    [postIdNumber],\n  );\n\n  if (asyncEffectState.state.loading) return <div>Loading...</div>;\n  if (asyncEffectState.state.error) return <div>Something went wrong: ${asyncEffectState.state.error.message}</div>;\n  if (!asyncEffectState.state.data) return <div>게시글이 없습니다.</div>;\n\n  return <div className=\"BlogDetail\">{asyncEffectState.state.data.title}</div>;\n};\n","import React, { ReactElement } from 'react';\n\n/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx, css } from '@emotion/react';\n\nfunction style() {\n  return css`\n    background-color: #297116;\n    color: white;\n    height: 50px;\n    img {\n      height: 100%;\n    }\n  `;\n}\n\nexport interface HeaderProps {\n  imageUrl?: string;\n}\n\nexport const Header = (props: HeaderProps): ReactElement => {\n  return (\n    <div className=\"Header\" css={style()}>\n      {props.imageUrl && <img alt=\"no\" src={props.imageUrl} />}\n    </div>\n  );\n};\n\nHeader.defaultProps = {};\n","import React, { ReactElement } from 'react';\n\n/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx, css } from '@emotion/react';\n\nimport { BrowserRouter as Router, Switch, Route, Redirect, Link } from 'react-router-dom';\n\nfunction style() {\n  return css`\n    display: flex;\n    justify-content: flex-start;\n    height: 100%;\n    #sideNav {\n      width: 20%;\n      height: 100%;\n      background-color: #1a506d;\n      color: #ffffff;\n      .sideNavMenu {\n        cursor: pointer;\n        margin-top: 20px;\n        font-weight: bold;\n        font-size: 16px;\n      }\n    }\n    #content {\n      width: 80%;\n      height: 100%;\n      .main-content {\n        padding-top: 20px;\n      }\n    }\n  `;\n}\n\nexport interface Menu {\n  id: number;\n  path: string;\n  exact?: boolean;\n  label: string;\n  component: React.ReactNode;\n  hidden?: boolean;\n}\n\nexport interface SideNavProps {\n  menus: Menu[];\n  children?: JSX.Element[] | JSX.Element;\n}\n\nconst pubUrl = process.env.PUBLIC_URL;\n\nexport const SideNav = (props: SideNavProps): ReactElement => {\n  // const [selectedMenuIndex, setSelectedMenuIndex] = useState(0);\n  // let selectedMenuIndex = 0\n\n  // useEffect(() => {\n  // }, [selectedMenuIndex])\n\n  return (\n    <Router>\n      <div className=\"SideNav\" css={style()}>\n        <div id=\"sideNav\">\n          <img\n            alt=\"no\"\n            src=\"https://noticon-static.tammolo.com/dgggcrkxq/image/upload/v1603679690/noticon/g16oddfpbk4wci2ec7nr.gif\"\n          />\n          {props.menus.map((menu: Menu) => {\n            if (menu.hidden) return null;\n            return (\n              <div key={menu.id} className=\"sideNavMenu\">\n                <Link to={pubUrl + menu.path}>{menu.label}</Link>\n              </div>\n            );\n          })}\n        </div>\n        <div id=\"content\">\n          {props.children}\n          <Switch>\n            <Route exact path={['/', pubUrl]}>\n              <Redirect to={pubUrl + props.menus[0].path} />\n            </Route>\n            <Route exact path=\"/andy-blog\">\n              <Redirect to={pubUrl + props.menus[0].path} />\n            </Route>\n            {props.menus.map((route) => (\n              <Route key={route.id} path={pubUrl + route.path} exact={route.exact}>\n                {route.component}\n              </Route>\n            ))}\n          </Switch>\n        </div>\n      </div>\n    </Router>\n  );\n};\n\nSideNav.defaultProps = {};\n","import React, { ReactElement } from 'react';\n\n/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx, css } from '@emotion/react';\n\nimport { useHistory } from 'react-router-dom';\nimport { useAndy } from '../../services/api';\nimport { Post } from '../../object-model/model';\n\nimport { useAsyncEffect } from '../../services/async';\n\nconst styleCss = css`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-top: 10px;\n\n  .post-item {\n    width: 80%;\n    display: flex;\n    border: solid 1px black;\n    justify-content: center;\n    padding: 10px;\n    margin-top: 10px;\n\n    button {\n      margin-left: 10px;\n    }\n  }\n`;\n\nconst pubUrl = process.env.PUBLIC_URL;\nexport const List = (): ReactElement => {\n  const andy = useAndy();\n  const history = useHistory();\n\n  const asyncEffectState = useAsyncEffect<Post[], Error, () => Promise<Post[]>>(andy.post.getPosts, []);\n  const deletePost = (postId: number) => {\n    andy.post.deletePost(postId).then(() => {\n      asyncEffectState.run([]);\n    });\n  };\n\n  function updatePost(postId: number) {\n    history.push(`${pubUrl}/update/${postId}`);\n  }\n\n  function viewPost(postId: number) {\n    history.push(`${pubUrl}/post/${postId}`);\n  }\n\n  function confirmDelete(postId: number) {\n    // if (window.confirm('정말 지우시겠습니까?')) {\n    deletePost(postId);\n    // }\n  }\n\n  if (!asyncEffectState.state) return <div />;\n  if (asyncEffectState.state.loading) return <div>loading...</div>;\n  if (asyncEffectState.state.error) return <div>error</div>;\n  if (!asyncEffectState.state.data) return <div />;\n\n  return (\n    <div className=\"List\" css={[styleCss]}>\n      {asyncEffectState.state &&\n        asyncEffectState.state.data &&\n        asyncEffectState.state.data.map((post: Post) => {\n          return (\n            <div className=\"post-item\" key={post.id}>\n              <div>{post.title}</div>\n              <button\n                type=\"button\"\n                onClick={() => {\n                  viewPost(post.id);\n                }}\n              >\n                상세 보기\n              </button>\n              <button\n                type=\"button\"\n                onClick={() => {\n                  updatePost(post.id);\n                }}\n              >\n                수정 하기\n              </button>\n              <button\n                type=\"button\"\n                onClick={() => {\n                  confirmDelete(post.id);\n                }}\n              >\n                지우기\n              </button>\n            </div>\n          );\n        })}\n    </div>\n  );\n};\n","import React, { ReactElement } from 'react';\n\n/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx, css } from '@emotion/react';\nimport { useForm } from 'react-hook-form';\n\ntype FormData = {\n  title: string;\n  content: string;\n};\n\nconst styleCss = css`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  margin-top: 10px;\n\n  .post-item {\n    width: 80%;\n    display: flex;\n    border: solid 1px black;\n    justify-content: center;\n    padding: 10px;\n    margin-top: 10px;\n\n    button {\n      margin-left: 10px;\n    }\n  }\n`;\n\nexport const Write = (): ReactElement => {\n  const { register, setValue, handleSubmit, errors } = useForm<FormData>();\n  const onSubmit = handleSubmit(({ title, content }) => {\n    console.log(title, content);\n  });\n\n  return (\n    <form onSubmit={onSubmit} css={[styleCss]}>\n      <div>title</div>\n      <input name=\"title\" ref={register({ required: true })} />\n      {errors.title && <span>This field is required</span>}\n      <div>content</div>\n      <input name=\"content\" ref={register({ required: true })} />\n      {errors.content && <span>This field is required</span>}\n      <button type=\"submit\">submit</button>\n    </form>\n  );\n};\n","import React, { ReactElement } from 'react';\n\nimport './App.css';\nimport { BlogDetail } from './components/BlogDetail/BlogDetail';\nimport { Header } from './components/Header/Header';\nimport { Menu, SideNav } from './components/SideNav/SideNav';\nimport { List } from './components/List/List';\nimport { Write } from './components/Write/Write';\nimport { AndyProvider } from './services/api';\nimport { PostServiceMock } from './services/post.service.mock';\nimport { CommentServiceMock } from './services/comment.service.mock';\n\nconst menus: Menu[] = [\n  {\n    id: 1,\n    path: '/post',\n    exact: true,\n    label: '게시글 리스트',\n    component: <List />,\n  },\n  {\n    id: 2,\n    path: '/new',\n    label: '글쓰기',\n    component: <Write />,\n  },\n  {\n    id: 3,\n    path: '/post/:postId',\n    label: '상세 페이지',\n    component: <BlogDetail />,\n    hidden: true,\n  },\n  {\n    id: 4,\n    path: '/update/:postId',\n    label: '글쓰기',\n    component: <Write />,\n    hidden: true,\n  },\n];\n\nconst App = (): ReactElement => {\n  return (\n    <AndyProvider andy={{ post: PostServiceMock, comment: CommentServiceMock }}>\n      <div className=\"App\" style={{ height: '100%' }}>\n        <SideNav menus={menus}>\n          <Header imageUrl=\"https://noticon-static.tammolo.com/dgggcrkxq/image/upload/v1603852170/noticon/iwbd31aaoxcxh1ololsi.png\" />\n        </SideNav>\n      </div>\n    </AndyProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n// eslint-disable-next-line\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}